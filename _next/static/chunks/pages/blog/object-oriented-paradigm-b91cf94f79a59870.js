(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[163],{6660:function(a,b,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/object-oriented-paradigm",function(){return c(4147)}])},3493:function(e,b,a){"use strict";var f=a(5893),g=a(7294),h=a(4345),i=a(4571),c=a(5609),j=a.n(c),d=a(9008),k=a.n(d);function l(c,a){(null==a||a>c.length)&&(a=c.length);for(var b=0,d=new Array(a);b<a;b++)d[b]=c[b];return d}b.Z=function(b){var a,c,m=b.title,n=b.description,o=b.date,e=(a=g.useState(""),c=2,function(a){if(Array.isArray(a))return a}(a)||function(b,e){var f,g,a=null==b?null:"undefined"!=typeof Symbol&&b[Symbol.iterator]||b["@@iterator"];if(null!=a){var c=[],d=!0,h=!1;try{for(a=a.call(b);!(d=(f=a.next()).done)&&(c.push(f.value),!e||c.length!==e);d=!0);}catch(i){h=!0,g=i}finally{try{d||null==a.return||a.return()}finally{if(h)throw g}}return c}}(a,c)||function(a,c){if(a){if("string"==typeof a)return l(a,c);var b=Object.prototype.toString.call(a).slice(8,-1);if("Object"===b&&a.constructor&&(b=a.constructor.name),"Map"===b||"Set"===b)return Array.from(b);if("Arguments"===b||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b))return l(a,c)}}(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=e[0],p=e[1];return g.useEffect(function(){p(location.href),console.log(d)},[d]),(0,f.jsxs)("div",{className:j().blogHead,children:[(0,f.jsxs)(k(),{children:[(0,f.jsx)("meta",{property:"og:url",content:d}),(0,f.jsx)("meta",{property:"twitter:url",content:d})]}),(0,f.jsx)(h.Z,{children:m}),(0,f.jsx)(i.Z,{children:(0,f.jsx)("em",{children:n})}),(0,f.jsx)("p",{children:o})]})}},4147:function(e,b,a){"use strict";a.r(b),a.d(b,{date:function(){return k},description:function(){return j},ogImage:function(){return l},title:function(){return d}});var f=a(5893),g=a(1151),h=a(3493),c=a(9008),i=a.n(c),d="Object Oriented Paradigm",j="Everything is an object.",k="Friday, May 27, 2022",l="https://og-gen.josiasw.dev/".concat(d.split(" ").join("%20"),".png?theme=light&md=1&fontSize=100px&images=https%3A%2F%2Fraw.githubusercontent.com%2FJosiasAurel%2FJosiasAurel%2Fmaster%2Fjosias.jpg&widths=350&heights=350");b.default=function(){var a=arguments.length>0&& void 0!==arguments[0]?arguments[0]:{},b=function(){var b=Object.assign({p:"p",em:"em",h2:"h2",ul:"ul",li:"li",h1:"h1",code:"code",a:"a",blockquote:"blockquote"},(0,g.ah)(),a.components);return(0,f.jsxs)(f.Fragment,{children:[(0,f.jsxs)(i(),{children:[(0,f.jsx)("title",{children:d}),(0,f.jsx)("meta",{name:"title",content:d}),(0,f.jsx)("meta",{name:"description",content:j}),(0,f.jsx)("meta",{property:"og:type",content:"website"}),(0,f.jsx)("meta",{property:"og:title",content:d}),(0,f.jsx)("meta",{property:"og:description",content:j}),(0,f.jsx)("meta",{property:"og:image",content:l}),(0,f.jsx)("meta",{property:"twitter:card",content:"summary_large_image"}),(0,f.jsx)("meta",{property:"twitter:title",content:d}),(0,f.jsx)("meta",{property:"twitter:description",content:j}),(0,f.jsx)("meta",{property:"twitter:image",content:l})]}),"\n",(0,f.jsx)(h.Z,{title:d,description:j,date:k}),"\n",(0,f.jsx)(b.p,{children:(0,f.jsx)(b.em,{children:"Everything is an Object"})}),"\n",(0,f.jsx)(b.p,{children:"The object-Oriented Paradigm is a style of programming in which everything is considered to be an object.\nAn object here is an instance of a class that holds data and methods to mutate/modify the data held by the object and hence, the object's state."}),"\n",(0,f.jsx)(b.p,{children:"Before we begin to take a deep look, let us understand some terms related to this paradigm."}),"\n",(0,f.jsx)(b.h2,{children:"Classes and Objects"}),"\n",(0,f.jsxs)(b.p,{children:["You can think of a ",(0,f.jsx)(b.em,{children:"class"})," as a general view of a group of items."]}),"\n",(0,f.jsxs)(b.p,{children:["An item belonging to a group is considered an ",(0,f.jsx)(b.em,{children:"object"}),". An object is an instance of a class i.e a specific implementation."]}),"\n",(0,f.jsx)(b.p,{children:"Each group of items has something peculiar about them."}),"\n",(0,f.jsxs)(b.p,{children:["For example, consider ",(0,f.jsx)(b.em,{children:"Fruits"}),".\nWe know every fruit will have a ",(0,f.jsx)(b.em,{children:"taste"}),", ",(0,f.jsx)(b.em,{children:"color"}),", ",(0,f.jsx)(b.em,{children:"shape"}),", etc. We then have pineapples, watermelon which is all\nspecific examples of fruits.\nYou can think of ",(0,f.jsx)(b.em,{children:"Fruits"})," as being a general description/blueprint upon which every other fruit builds.\nWatermelon and pineapples could also be seen as objects of the class ",(0,f.jsx)(b.em,{children:"Fruit"}),"."]}),"\n",(0,f.jsx)(b.p,{children:"Every object has a property and attribute. These properties and attributes can be thought of as key-value pairs holding data about\nan object."}),"\n",(0,f.jsx)(b.h2,{children:"Methods"}),"\n",(0,f.jsxs)(b.p,{children:["Methods are functions that are attached to a class.\nThese sorts of functions can only be called on instances of that class except for ",(0,f.jsx)(b.em,{children:"static methods"})," which can be called from the class itself."]}),"\n",(0,f.jsx)(b.p,{children:"This paradigm encourages reusability and helps us to group items under a specific type."}),"\n",(0,f.jsx)(b.p,{children:"In this article, we are going to look at some important concepts in the Object-Oriented paradigm namely;"}),"\n",(0,f.jsxs)(b.ul,{children:["\n",(0,f.jsx)(b.li,{children:"Abstraction"}),"\n",(0,f.jsx)(b.li,{children:"Encapsulation"}),"\n",(0,f.jsx)(b.li,{children:"Inheritance"}),"\n",(0,f.jsx)(b.li,{children:"Polymorphism"}),"\n"]}),"\n",(0,f.jsx)(b.h1,{children:"Data Abstraction"}),"\n",(0,f.jsxs)(b.p,{children:["Abstraction is a way of preventing the internal data held by an object from being accessed by some external agent.\nThis means that only methods of that class may access the data held by an object.\nIn languages like ",(0,f.jsx)(b.em,{children:"Java"}),", this is typically done by adding access specifiers like ",(0,f.jsx)(b.code,{children:"private"}),", ",(0,f.jsx)(b.code,{children:"public"}),", or even ",(0,f.jsx)(b.code,{children:"protected"}),"."]}),"\n",(0,f.jsxs)(b.p,{children:["Data Abstraction here is a ",(0,f.jsx)(b.a,{href:"https://en.wikipedia.org/wiki/Software_design_pattern",children:"design pattern"}),"."]}),"\n",(0,f.jsxs)(b.blockquote,{children:["\n",(0,f.jsx)(b.p,{children:"It is worth noting that even methods can be abstracted in an object preventing direct access."}),"\n"]}),"\n",(0,f.jsx)(b.h1,{children:"Encapsulation"}),"\n",(0,f.jsx)(b.p,{children:"Encapsulation is sometimes confused with Data Abstraction mainly because they are centered around\nhiding stuff from a class. There is some sort of overlap here."}),"\n",(0,f.jsx)(b.p,{children:"Unlike abstraction, encapsulation is concerned with unifying together data, and the methods that act\non that data under a single unit. This is usually to hide the way data is structured in the class."}),"\n",(0,f.jsx)(b.p,{children:"This means that the internal structure of data as described by the class might change but the user of the class\nneed not be concerned by those changes as long as the method exposed by that class does the same operation."}),"\n",(0,f.jsx)(b.p,{children:"Encapsulation is applied to restrict the direct access to object data."}),"\n",(0,f.jsx)(b.h1,{children:"Inheritance"}),"\n",(0,f.jsx)(b.p,{children:"This involves a class inheriting from another class."}),"\n",(0,f.jsxs)(b.p,{children:["Let's consider the ",(0,f.jsx)(b.em,{children:"Fruit"})," class we described above.\nWe might have a higher class named ",(0,f.jsx)(b.code,{children:"LivingThing"})," from which our Fruit will extend."]}),"\n",(0,f.jsxs)(b.p,{children:["A living thing can ",(0,f.jsx)(b.em,{children:"grow"}),", ",(0,f.jsx)(b.em,{children:"eat"})," and eventually die. Our fruit class, inheriting from the ",(0,f.jsx)(b.code,{children:"LivingThing"})," class\nwill therefore also be able to ",(0,f.jsx)(b.em,{children:"grow"})," & ",(0,f.jsx)(b.em,{children:"eat"}),"."]}),"\n",(0,f.jsxs)(b.p,{children:["In this context, we say ",(0,f.jsx)(b.code,{children:"LivingThing"})," is a ",(0,f.jsx)(b.em,{children:"super class"})," or ",(0,f.jsx)(b.em,{children:"parent class"})," of ",(0,f.jsx)(b.code,{children:"Fruit"})," while ",(0,f.jsx)(b.code,{children:"Fruit"})," in itself is a ",(0,f.jsx)(b.em,{children:"child class"})," of ",(0,f.jsx)(b.code,{children:"LivingThing"}),"."]}),"\n",(0,f.jsx)(b.h1,{children:"Polymorphism"}),"\n",(0,f.jsxs)(b.p,{children:["Polymorphism refers to providing a single generic view for objects of different types.\nThis generic view is typically referred to as an ",(0,f.jsx)(b.a,{href:"https://en.wikipedia.org/wiki/Interface_(computing)",children:"interface"}),"."]}),"\n",(0,f.jsxs)(b.p,{children:["Looking at our ",(0,f.jsx)(b.code,{children:"Fruit"})," example again, we know mangoes and watermelons both grow differently - but one thing is that they will both have a ",(0,f.jsx)(b.code,{children:"grow()"})," method attached to them."]}),"\n",(0,f.jsxs)(b.p,{children:["This mechanism applies even during inheritance.\nThis means that this ",(0,f.jsx)(b.code,{children:"grow()"})," method may have been inherited from the ",(0,f.jsx)(b.code,{children:"LivingThing"})," class even though it has different implementations."]}),"\n",(0,f.jsxs)(b.p,{children:["You have reached the end. If you want to learn about other design patterns, then consider ",(0,f.jsx)(b.a,{href:"/blog/programming-paradigms",children:"this article"}),"."]}),"\n",(0,f.jsxs)(b.p,{children:["\u2014 ",(0,f.jsx)(b.a,{href:"/",children:"Josias Aurel"})]})]})},c=Object.assign({},(0,g.ah)(),a.components).wrapper;return c?(0,f.jsx)(c,Object.assign({},a,{children:(0,f.jsx)(b,{})})):b()}},9008:function(a,c,b){a.exports=b(3121)}},function(a){a.O(0,[774,888,179],function(){return a(a.s=6660)}),_N_E=a.O()}])